// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Bund.API.Autobahn.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class ParkingLorry : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Beginn des betroffenen Streckenabschnitts (Koordinaten in WGS84). Identisch zu Point, jedoch sind rundungsbedingte Abweichungen möglich.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Bund.API.Autobahn.Client.Models.Coordinate? Coordinate { get; set; }
#nullable restore
#else
        public global::Bund.API.Autobahn.Client.Models.Coordinate Coordinate { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Description { get; set; }
#nullable restore
#else
        public List<string> Description { get; set; }
#endif
        /// <summary>The display_type property</summary>
        public global::Bund.API.Autobahn.Client.Models.DisplayType? DisplayType { get; set; }
        /// <summary>Rechteck (in WGS84-Koordinaten), das den betroffenen Streckenabschnitt umschließt.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Extent { get; set; }
#nullable restore
#else
        public string Extent { get; set; }
#endif
        /// <summary>The footer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Footer { get; set; }
#nullable restore
#else
        public List<string> Footer { get; set; }
#endif
        /// <summary>The future property</summary>
        public bool? Future { get; set; }
        /// <summary>Sinnbild, das die Art des Eintrags beschreibt. Größtenteils sind diese dem offiziellen Verkehrszeichenkatalog entnommen, teilweise allerdings mit abweichender Bedeutung und/oder nicht offiziellen Unternummern. Wo kein passendes Verkehrszeichen existiert, werden nicht-numerische Werte verwendet:&lt;ul&gt;&lt;li&gt;101: Gefahr&lt;/li&gt;&lt;li&gt;123: Bauarbeiten&lt;/li&gt;&lt;li&gt;250: Sperrung&lt;/li&gt;&lt;li&gt;262-2: Max. 3,5t&lt;/li&gt;&lt;li&gt;314-50: Park-/Rastplatz (Pkw/Lkw)&lt;/li&gt;&lt;li&gt;314-50-2: Park-/Rastplatz (nur Pkw)&lt;/li&gt;&lt;li&gt;448: Anschlussstelle gesperrt&lt;/li&gt;&lt;li&gt;charging_plug_strong: Schnellladestation für E-Fahrzeuge&lt;/li&gt;&lt;li&gt;warnkegel: Kurzzeitbaustelle&lt;/li&gt;&lt;/ul&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The identifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Identifier { get; set; }
#nullable restore
#else
        public string Identifier { get; set; }
#endif
        /// <summary>The isBlocked property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsBlocked { get; set; }
#nullable restore
#else
        public string IsBlocked { get; set; }
#endif
        /// <summary>The lorryParkingFeatureIcons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Bund.API.Autobahn.Client.Models.LorryParkingFeatureIcon>? LorryParkingFeatureIcons { get; set; }
#nullable restore
#else
        public List<global::Bund.API.Autobahn.Client.Models.LorryParkingFeatureIcon> LorryParkingFeatureIcons { get; set; }
#endif
        /// <summary>Beginn des betroffenen Streckenabschnitts (Längengrad und Breitengrad in WGS84). Identisch zu Coordinate, jedoch sind rundungsbedingte Abweichungen möglich.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Point { get; set; }
#nullable restore
#else
        public string Point { get; set; }
#endif
        /// <summary>The routeRecommendation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Bund.API.Autobahn.Client.Models.ParkingLorry_routeRecommendation>? RouteRecommendation { get; set; }
#nullable restore
#else
        public List<global::Bund.API.Autobahn.Client.Models.ParkingLorry_routeRecommendation> RouteRecommendation { get; set; }
#endif
        /// <summary>The subtitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subtitle { get; set; }
#nullable restore
#else
        public string Subtitle { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Bund.API.Autobahn.Client.Models.ParkingLorry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Bund.API.Autobahn.Client.Models.ParkingLorry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Bund.API.Autobahn.Client.Models.ParkingLorry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "coordinate", n => { Coordinate = n.GetObjectValue<global::Bund.API.Autobahn.Client.Models.Coordinate>(global::Bund.API.Autobahn.Client.Models.Coordinate.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "display_type", n => { DisplayType = n.GetEnumValue<global::Bund.API.Autobahn.Client.Models.DisplayType>(); } },
                { "extent", n => { Extent = n.GetStringValue(); } },
                { "footer", n => { Footer = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "future", n => { Future = n.GetBoolValue(); } },
                { "icon", n => { Icon = n.GetStringValue(); } },
                { "identifier", n => { Identifier = n.GetStringValue(); } },
                { "isBlocked", n => { IsBlocked = n.GetStringValue(); } },
                { "lorryParkingFeatureIcons", n => { LorryParkingFeatureIcons = n.GetCollectionOfObjectValues<global::Bund.API.Autobahn.Client.Models.LorryParkingFeatureIcon>(global::Bund.API.Autobahn.Client.Models.LorryParkingFeatureIcon.CreateFromDiscriminatorValue)?.AsList(); } },
                { "point", n => { Point = n.GetStringValue(); } },
                { "routeRecommendation", n => { RouteRecommendation = n.GetCollectionOfObjectValues<global::Bund.API.Autobahn.Client.Models.ParkingLorry_routeRecommendation>(global::Bund.API.Autobahn.Client.Models.ParkingLorry_routeRecommendation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "subtitle", n => { Subtitle = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Bund.API.Autobahn.Client.Models.Coordinate>("coordinate", Coordinate);
            writer.WriteCollectionOfPrimitiveValues<string>("description", Description);
            writer.WriteEnumValue<global::Bund.API.Autobahn.Client.Models.DisplayType>("display_type", DisplayType);
            writer.WriteStringValue("extent", Extent);
            writer.WriteCollectionOfPrimitiveValues<string>("footer", Footer);
            writer.WriteBoolValue("future", Future);
            writer.WriteStringValue("icon", Icon);
            writer.WriteStringValue("identifier", Identifier);
            writer.WriteStringValue("isBlocked", IsBlocked);
            writer.WriteCollectionOfObjectValues<global::Bund.API.Autobahn.Client.Models.LorryParkingFeatureIcon>("lorryParkingFeatureIcons", LorryParkingFeatureIcons);
            writer.WriteStringValue("point", Point);
            writer.WriteCollectionOfObjectValues<global::Bund.API.Autobahn.Client.Models.ParkingLorry_routeRecommendation>("routeRecommendation", RouteRecommendation);
            writer.WriteStringValue("subtitle", Subtitle);
            writer.WriteStringValue("title", Title);
        }
    }
}
#pragma warning restore CS0618
